import os
import uuid
import logging
from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException, Depends, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

import requests
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt

from pydantic import BaseModel
from pydantic_settings import BaseSettings, SettingsConfigDict

from supabase import create_client, Client

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.agents import create_react_agent, AgentExecutor
from langchain.prompts import PromptTemplate
from langchain.memory import ConversationBufferMemory
from langchain.tools import Tool
from langchain.chains.llm import LLMChain
from langchain.chains.router import LLMRouterChain
from langchain.chains.router.multi_prompt import MULTI_PROMPT_ROUTER_TEMPLATE
from langchain.chains.router.llm_router import RouterOutputParser
from langchain_community.chat_message_histories import ChatMessageHistory

# Import our agent definitions
from agents import (
    get_agent_definition,
    get_agent_routing_map,
    generate_conversation_title
)

# ---------------------------
# Load environment & settings
# ---------------------------
load_dotenv()


class Settings(BaseSettings):
    FRONTEND_URL: str = "http://localhost:3000"
    BACKEND_URL: str = "http://localhost:8000"
    SUPABASE_URL: str
    SUPABASE_KEY: str

    DEFAULT_GOOGLE_API_KEY: str = ""
    DEFAULT_ALPHA_VANTAGE_KEY: str = "XBYMG2VY49SX4K21"
    ALPHA_VANTAGE_HOST: str = "www.alphavantage.co"

    GEMINI_MODEL: str = "gemini-2.0-flash"

    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        extra="ignore",
    )


settings = Settings()

# ---------------------------
# FastAPI app setup
# ---------------------------
app = FastAPI(
    title="Finance Advisor API",
    description="API for financial advice, portfolio analysis, and planning",
    docs_url="/docs",
    redoc_url="/redoc"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=[settings.FRONTEND_URL, "http://localhost:3000", "http://localhost:3001", "*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

app.mount("/static", StaticFiles(directory="static"), name="static")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

supabase_client: Client
llm: ChatGoogleGenerativeAI
router_chain: LLMRouterChain
agent_destinations: Dict[str, AgentExecutor]


# ---------------------------
# Pydantic models
# ---------------------------
class ChatInput(BaseModel):
    message: str
    context: Optional[Dict[Any, Any]] = None


class ChatOutput(BaseModel):
    message: str
    agent_name: str
    agent_display_name: str
    agent_icon: str
    agent_color: str
    conversation_id: str
    conversation_title: str
    created_at: str


# ---------------------------
# Auth dependency
# ---------------------------
class UserWithKeys:
    def __init__(self, user_id, email, google_api_key, alpha_vantage_key):
        self.id = user_id
        self.email = email
        self.google_api_key = google_api_key
        self.alpha_vantage_key = alpha_vantage_key


async def get_current_user(authorization: str = Header(...)) -> UserWithKeys:
    if not authorization or not authorization.startswith("Bearer "):
        raise HTTPException(status_code=401, detail="Invalid authorization header")

    token = authorization.replace("Bearer ", "")

    # Development mode - allow testing with a dummy token
    if token == "dev-mode-token" or os.environ.get("FASTAPI_ENV") == "development":
        logger.info("Using development mode authentication")
        return UserWithKeys(
            user_id="dev-user-id",
            email="dev@example.com",
            google_api_key=settings.DEFAULT_GOOGLE_API_KEY,
            alpha_vantage_key=settings.DEFAULT_ALPHA_VANTAGE_KEY
        )

    try:
        resp = supabase_client.auth.get_user(token)
        if resp.user is None:
            raise HTTPException(status_code=401, detail="User not found")
        profile = (
                      supabase_client
                      .table("profiles")
                      .select("google_api_key,alpha_vantage_key")
                      .eq("id", resp.user.id)
                      .single()
                      .execute()
                  ).data or {}

        google_api_key = profile.get("google_api_key") or resp.user.user_metadata.get("google_api_key", "")
        alpha_vantage_key = profile.get("alpha_vantage_key") or resp.user.user_metadata.get("alpha_vantage_key", "")

        return UserWithKeys(
            user_id=resp.user.id,
            email=resp.user.email,
            google_api_key=google_api_key or settings.DEFAULT_GOOGLE_API_KEY,
            alpha_vantage_key=alpha_vantage_key or settings.DEFAULT_ALPHA_VANTAGE_KEY
        )
    except Exception as e:
        logger.error(f"Auth error: {e}")
        raise HTTPException(status_code=401, detail="Authentication failed")


# ---------------------------
# Chat history helper
# ---------------------------
async def get_chat_history(conversation_id: Optional[str]) -> ChatMessageHistory:
    history = ChatMessageHistory()
    if not conversation_id:
        return history
    try:
        rows = (
                   supabase_client
                   .table("chat_messages")
                   .select("user_message,ai_response")
                   .eq("conversation_id", conversation_id)
                   .order("created_at", desc=False)
                   .limit(50)
                   .execute()
                   .data
               ) or []
        for row in rows:
            history.add_user_message(row["user_message"])
            history.add_ai_message(row["ai_response"])
    except Exception as e:
        logger.warning(f"Failed to fetch chat history: {e}")
    return history


# ---------------------------
# Tools
# ---------------------------
def search_financial_news(query: str, api_key: Optional[str] = None) -> Union[str, List[Dict[str, Any]]]:
    key = api_key or settings.DEFAULT_ALPHA_VANTAGE_KEY
    if not key:
        return "News API key not configured."
    host = settings.ALPHA_VANTAGE_HOST
    if query.isupper() and query.isalpha() and len(query) <= 5:
        url = f"https://{host}/query?function=NEWS_SENTIMENT&tickers={query}&apikey={key}"
    else:
        url = f"https://{host}/query?function=NEWS_SENTIMENT&apikey={key}"
    try:
        res = requests.get(url)
        res.raise_for_status()
        data = res.json()
        feed = data.get("feed", [])
        if not feed:
            return f"No articles found for '{query}'."
        return [
            {
                "title": a.get("title"),
                "url": a.get("url"),
                "source": a.get("source"),
                "published_at": a.get("time_published")
            }
            for a in feed[:5]
        ]
    except Exception as e:
        logger.error(f"News fetch error for '{query}': {e}")
        return f"Error fetching news: {e}"


def get_stock_price(symbol: str) -> str:
    try:
        ticker = yf.Ticker(symbol)
        hist = ticker.history(period="1d")
        price = (
            hist["Close"].iloc[-1]
            if not hist.empty
            else ticker.info.get("currentPrice") or ticker.info.get("regularMarketPrice")
        )
        return f"{symbol}: ${price:.2f}" if price else f"Price not available for {symbol}."
    except Exception as e:
        logger.error(f"Price fetch error for '{symbol}': {e}")
        return f"Error fetching price for {symbol}."


def analyze_portfolio(user_id: str) -> str:
    rows = supabase_client.table("portfolio") \
               .select("symbol,quantity,purchase_date") \
               .eq("user_id", user_id).execute().data or []
    if not rows:
        return "You have no holdings in your portfolio."
    total_val = 0.0
    details = []
    for r in rows:
        sym, qty = r["symbol"], r["quantity"]
        price = yf.Ticker(sym).history(period="1d")["Close"].iloc[-1]
        val = price * qty
        total_val += val
        details.append((sym, qty, price, val))
    lines = [f"{sym}: {qty} shares @ ${price:.2f} = ${val:.2f}" for sym, qty, price, val in details]
    alloc = [f"{sym}: {val / total_val:.1%}" for sym, _, _, val in details]
    return (
            f"Total Portfolio Value: ${total_val:.2f}\n\n"
            "Holdings:\n" + "\n".join(lines) + "\n\n"
                                               "Allocation:\n" + "\n".join(alloc)
    )


def create_financial_plan(user_id: str, user_llm=None) -> str:
    profile = supabase_client.table("user_profiles") \
        .select("age,goals,risk_tolerance") \
        .eq("user_id", user_id).single().execute().data
    if not profile:
        return "Please set up your profile (age, goals, risk tolerance) first."
    prompt = (
        f"Create a personalized financial plan for a client aged {profile['age']}, "
        f"goals: '{profile['goals']}', risk tolerance: '{profile['risk_tolerance']}'. "
        "Provide actionable steps and a timeline."
    )
    try:
        if not user_llm:
            user_data = supabase_client.table("profiles") \
                            .select("google_api_key") \
                            .eq("id", user_id).single().execute().data or {}
            api_key = user_data.get("google_api_key")
            if not api_key:
                return "Google API key is required to generate a financial plan. Please update your profile."
            user_llm = ChatGoogleGenerativeAI(
                model=settings.GEMINI_MODEL,
                google_api_key=api_key,
                temperature=0.2
            )
        return user_llm.predict(prompt)
    except Exception as e:
        logger.error(f"Financial plan error: {e}")
        return f"Error generating financial plan: {e}"


def assess_risk(user_id: str) -> str:
    rows = supabase_client.table("portfolio") \
               .select("symbol,quantity") \
               .eq("user_id", user_id).execute().data or []
    if not rows:
        return "No portfolio data to assess risk."
    frames = []
    for r in rows:
        hist = yf.Ticker(r["symbol"]).history(period="1y")["Close"] * r["quantity"]
        frames.append(hist.rename(r["symbol"]))
    df = pd.concat(frames, axis=1).fillna(method="ffill").dropna()
    port_val = df.sum(axis=1)
    vol = port_val.pct_change().dropna().std() * (252 ** 0.5)
    level = "low" if vol < 0.10 else "medium" if vol < 0.20 else "high"
    return f"Annualized volatility: {vol:.2%}. Risk profile: {level}."


def generate_performance_chart(user_id: str) -> str:
    rows = supabase_client.table("portfolio") \
               .select("symbol,quantity") \
               .eq("user_id", user_id).execute().data or []
    if not rows:
        return "No portfolio data to chart."
    frames = []
    for r in rows:
        hist = yf.Ticker(r["symbol"]).history(period="1y")["Close"] * r["quantity"]
        frames.append(hist.rename(r["symbol"]))
    df = pd.concat(frames, axis=1).fillna(method="ffill").dropna()
    df["Total"] = df.sum(axis=1)

    fig, ax = plt.subplots()
    df["Total"].plot(ax=ax)
    ax.set_title("Portfolio Value Over Last Year")
    ax.set_xlabel("Date")
    ax.set_ylabel("Value ($)")

    os.makedirs("static", exist_ok=True)
    filename = f"static/portfolio_perf_{user_id}.png"
    fig.savefig(filename, bbox_inches="tight")
    plt.close(fig)

    return f"{settings.BACKEND_URL}/static/{os.path.basename(filename)}"


def make_tool(name: str, func, desc: str) -> Tool:
    return Tool(name=name, func=func, description=desc)


def build_agents() -> Dict[str, AgentExecutor]:
    tools = {
        "NewsSearch": make_tool("NewsSearch", search_financial_news, "Fetch financial news"),
        "PriceCheck": make_tool("PriceCheck", get_stock_price, "Get stock price"),
        "AnalyzePortfolio": make_tool("AnalyzePortfolio", analyze_portfolio, "Analyze your portfolio"),
        "CreatePlan": make_tool("CreatePlan", create_financial_plan, "Generate a financial plan"),
        "RiskAssessment": make_tool("RiskAssessment", assess_risk, "Assess portfolio risk"),
        "PerformanceChart": make_tool("PerformanceChart", generate_performance_chart, "Generate performance chart"),
    }
    prompts = {
        "Market": "You are a Market Analyst. Use NewsSearch and PriceCheck.",
        "Portfolio": "You are a Portfolio Manager. Use AnalyzePortfolio, RiskAssessment, PerformanceChart.",
        "Planner": "You are a Financial Planner. Use CreatePlan.",
        "General": "You are a General Finance Advisor. You may use any tool."
    }
    dests = {
        "Market": ["NewsSearch", "PriceCheck"],
        "Portfolio": ["AnalyzePortfolio", "RiskAssessment", "PerformanceChart"],
        "Planner": ["CreatePlan"],
        "General": list(tools.keys()),
    }
    chains: Dict[str, AgentExecutor] = {}
    for name, keys in dests.items():
        selected = [tools[k] for k in keys]
        memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
        prompt_str = (
            f"{prompts[name]}\n\n"
            "You have access to the following tools:\n{tools}\n\n"
            "To use a tool:\n"
            "```\n"
            "Thought: Do I need to use a tool? Yes\n"
            "Action: one of [{tool_names}]\n"
            "Action Input: <input>\n"
            "Observation: <result>\n"
            "```\n"
            "Or if no tool needed:\n"
            "```\n"
            "Thought: Do I need to use a tool? No\n"
            "Final Answer: <your answer>\n"
            "```\n\n"
            "History:\n{chat_history}\n"
            "Human: {input}\n"
            "Thought:{agent_scratchpad}"
        )
        prompt = PromptTemplate.from_template(prompt_str)
        agent = create_react_agent(llm=llm, tools=selected, prompt=prompt)
        chains[name] = AgentExecutor(agent=agent, tools=selected, memory=memory, verbose=True)
    return chains


@app.on_event("startup")
async def on_startup():
    global supabase_client, llm, router_chain, agent_destinations
    logger.info(
        f"Supabase URL set? {'✔' if settings.SUPABASE_URL else '❌'}; "
        f"Key set? {'✔' if settings.SUPABASE_KEY else '❌'}"
    )
    if not settings.SUPABASE_URL or not settings.SUPABASE_KEY:
        raise RuntimeError("SUPABASE_URL and SUPABASE_KEY must be set in .env")

    # Initialize Supabase client
    supabase_client = create_client(settings.SUPABASE_URL, settings.SUPABASE_KEY)

    # Now that supabase_client is initialized, we can import and setup conversation_routes
    import conversation_routes
    conversation_routes.initialize(supabase_client, get_current_user, UserWithKeys)
    app.include_router(conversation_routes.router)

    # Initialize the LLM
    logger.info("Initializing LLM with Google API key...")
    if not settings.DEFAULT_GOOGLE_API_KEY:
        logger.warning("No default Google API key found in environment variables!")
    try:
        llm = ChatGoogleGenerativeAI(
            model=settings.GEMINI_MODEL,
            google_api_key=settings.DEFAULT_GOOGLE_API_KEY,
            temperature=0.2,
            convert_system_message_to_human=True
        )
        logger.info(f"Successfully initialized {settings.GEMINI_MODEL} LLM")
    except Exception as e:
        logger.error(f"Failed to initialize LLM: {e}")
        raise

    # Initialize router chain and agent destinations
    logger.info("Building router chain and agent destinations...")
    try:
        # Get the agent routing map
        agent_mapping = get_agent_routing_map()
        destinations_str = "\n".join([f"{k}: {v}" for k, v in agent_mapping.items()])

        # Create the router chain for directing messages to appropriate agents
        router_template = MULTI_PROMPT_ROUTER_TEMPLATE.format(destinations=destinations_str)
        router_prompt = PromptTemplate(
            template=router_template,
            input_variables=["input", "market_data", "news_data"]
        )
        # ← Attach the required output parser
        router_prompt.output_parser = RouterOutputParser()

        # Create the LLM chain with the prompt
        llm_chain = LLMChain(llm=llm, prompt=router_prompt)

        # Create the router chain with the LLM chain
        router_chain = LLMRouterChain(
            llm_chain=llm_chain,
            destination_key="destination",
            next_inputs_key="next_inputs"
        )

        # Build the agent executors
        agent_destinations = build_agents()
        logger.info(f"Initialized {len(agent_destinations)} agent destinations")
    except Exception as e:
        logger.error(f"Failed to initialize router chain or agents: {e}")
        raise

    # Initialize other components
    os.makedirs("static", exist_ok=True)
    logger.info("FastAPI server started successfully")


@app.get("/health")
async def health():
    return {"status": "ok"}


@app.get("/dev/health")
async def dev_health():
    """Development mode health check that doesn't require authentication"""
    return {
        "status": "ok",
        "mode": "development",
        "gemini_api_key_configured": bool(settings.DEFAULT_GOOGLE_API_KEY),
        "alpha_vantage_key_configured": bool(settings.DEFAULT_ALPHA_VANTAGE_KEY),
        "timestamp": datetime.now().isoformat()
    }


def create_user_llm(google_api_key: str):
    if not google_api_key:
        raise ValueError("Google API key is required")
    return ChatGoogleGenerativeAI(
        model=settings.GEMINI_MODEL,
        google_api_key=google_api_key,
        temperature=0.2,
        convert_system_message_to_human=True
    )


def build_user_agents(user):
    """Build agent executors for a specific user with their API keys"""
    user_llm = create_user_llm(user.google_api_key)

    # Define the tools with user context
    tools = [
        make_tool("NewsSearch", lambda q: search_financial_news(q, user.alpha_vantage_key),
                  "Search for recent financial news and market updates"),
        make_tool("PriceCheck", get_stock_price,
                  "Get the current price of a stock by ticker symbol"),
        make_tool("AnalyzePortfolio", lambda: analyze_portfolio(user.id),
                  "Analyze the user's investment portfolio for performance and allocation"),
        make_tool("CreatePlan", lambda: create_financial_plan(user.id, user_llm),
                  "Create a personalized financial plan based on the user's goals"),
        make_tool("RiskAssessment", lambda: assess_risk(user.id),
                  "Assess investment risk level of the user's portfolio"),
        make_tool("PerformanceChart", lambda: generate_performance_chart(user.id),
                  "Generate a visual chart showing portfolio performance over time")
    ]

    # Get routing information from agent definitions
    destinations_map = get_agent_routing_map()
    destinations_str = "\n".join(f"{k}: {v}" for k, v in destinations_map.items())

    # Create the router chain for directing messages to appropriate agents
    router_template = MULTI_PROMPT_ROUTER_TEMPLATE.format(destinations=destinations_str)
    router_prompt = PromptTemplate(
        template=router_template,
        input_variables=["input", "market_data", "news_data"]
    )
    # ← Attach the required output parser
    router_prompt.output_parser = RouterOutputParser()

    llm_chain = LLMChain(llm=user_llm, prompt=router_prompt)
    router_chain = LLMRouterChain(
        llm_chain=llm_chain,
        destination_key="destination",
        next_inputs_key="next_inputs"
    )

    # Instantiate each destination agent
    destinations = {}
    for agent_name in destinations_map.keys():
        agent_def = get_agent_definition(agent_name)
        agent_tools = [tool for tool in tools if tool.name in agent_def.tools]
        prompt = PromptTemplate.from_template(
            f"{agent_def.instructions}\n\n"
            "You have access to the following tools:\n{tools}\n\n"
            "To use a tool, use the following format:\n"
            "```\n"
            "Thought: Do I need to use a tool? Yes\n"
            "Action: the action to take, should be one of [{tool_names}]\n"
            "Action Input: the input to the action\n"
            "Observation: the result of the action\n"
            "```\n"
            "When you have a response to say to the Human, or if you do not need to use a tool, you MUST use the format:\n"
            "```\n"
            "Thought: Do I need to use a tool? No\n"
            "Final Answer: [your response here]\n"
            "```\n\n"
            "Begin!\n"
            "{chat_history}\n"
            "Human: {input}\n"
            "AI: "
        )
        agent = create_react_agent(user_llm, agent_tools, prompt)
        destinations[agent_name] = AgentExecutor(
            agent=agent,
            tools=agent_tools,
            memory=ConversationBufferMemory(memory_key="chat_history", return_messages=True),
            verbose=True
        )

    return destinations, router_chain


@app.post("/dev/chat", response_model=ChatOutput)
async def dev_chat_endpoint(
        chat: ChatInput,
        conversation_id: Optional[str] = None
):
    logger.info(f"Received DEV chat message: '{chat.message}'")
    logger.debug(f"DEV chat endpoint received: {chat}")
    try:
        dev_user = UserWithKeys(
            user_id="dev-user-id",
            email="dev@example.com",
            google_api_key=settings.DEFAULT_GOOGLE_API_KEY,
            alpha_vantage_key=settings.DEFAULT_ALPHA_VANTAGE_KEY
        )

        new_conversation = False
        if not conversation_id:
            conversation_id = str(uuid.uuid4())
            new_conversation = True

        history = await get_chat_history(conversation_id)
        user_agents, user_router = build_user_agents(dev_user)

        logger.info("Routing chat message to appropriate agent")
        route = user_router.invoke({"input": chat.message})
        agent_name = route["destination"]
        logger.info(f"Selected agent: {agent_name}")
        agent = user_agents.get(agent_name) or user_agents.get("general")
        if not agent:
            raise HTTPException(400, detail="No suitable agent available")

        try:
            logger.info(f"Invoking agent {agent_name} with message: '{chat.message}'")
            # Include market and news data from context
            result = agent.invoke({
                "input": chat.message,
                "chat_history": history.messages,
                "market_data": chat.context.get("market_data") if chat.context else None,
                "news_data": chat.context.get("news_data") if chat.context else None
            })
            logger.info("Agent executed successfully")
            response_text = result["output"]
            logger.info(f"Agent response: '{response_text[:100]}...' (truncated)")
        except Exception as e:
            logger.error(f"Error invoking agent: {e}")
            raise

        conversation_title = "Development Conversation"
        if new_conversation:
            conversation_title = generate_conversation_title(chat.message)

        agent_def = get_agent_definition(agent_name)
        return ChatOutput(
            message=response_text,
            agent_name=agent_name,
            agent_display_name=agent_def.display_name,
            agent_icon=agent_def.icon,
            agent_color=agent_def.color,
            conversation_id=conversation_id,
            conversation_title=conversation_title,
            created_at=datetime.now().isoformat()
        )
    except Exception as e:
        logger.error(f"Dev chat error: {e}")
        error_agent = get_agent_definition("error")
        return ChatOutput(
            message=f"I encountered an error: {e}. Please try again or rephrase your question.",
            agent_name="error",
            agent_display_name=error_agent.display_name,
            agent_icon=error_agent.icon,
            agent_color=error_agent.color,
            conversation_id=conversation_id or str(uuid.uuid4()),
            conversation_title="Error Session",
            created_at=datetime.now().isoformat()
        )


@app.post("/chat", response_model=ChatOutput)
async def chat_endpoint(
        chat: ChatInput,
        user=Depends(get_current_user),
        conversation_id: Optional[str] = None
):
    logger.info(f"Received chat message: '{chat.message}' from user: {user.id}")
    try:
        if not user.google_api_key:
            raise HTTPException(400, detail="Google API key missing in your profile.")
        if not user.alpha_vantage_key:
            raise HTTPException(400, detail="Alpha Vantage API key missing in your profile.")

        new_conversation = False
        if not conversation_id:
            conversation_id = str(uuid.uuid4())
            new_conversation = True

        history = await get_chat_history(conversation_id)
        user_agents, user_router = build_user_agents(user)

        logger.info("Routing message to appropriate agent")
        route = user_router.invoke({"input": chat.message})
        agent_name = route["destination"]
        agent = user_agents.get(agent_name)
        if not agent:
            logger.warning(f"Agent {agent_name} not found, falling back to general")
            agent_name = "general"
            agent = user_agents.get(agent_name)
            if not agent:
                raise HTTPException(400, detail="No suitable agent available")

        try:
            logger.info(f"Invoking agent {agent_name} with message: '{chat.message}'")
            # Include market and news data from context
            result = agent.invoke({
                "input": chat.message,
                "chat_history": history.messages,
                "market_data": chat.context.get("market_data") if chat.context else None,
                "news_data": chat.context.get("news_data") if chat.context else None
            })
            logger.info("Agent executed successfully")
            response_text = result["output"]
            logger.info(f"Agent response: '{response_text[:100]}...' (truncated)")
        except Exception as e:
            logger.error(f"Error invoking agent: {e}")
            raise

        conversation_title = None
        if new_conversation:
            conversation_title = generate_conversation_title(chat.message)
            try:
                supabase_client.table("conversations").insert({
                    "id": conversation_id,
                    "user_id": user.id,
                    "title": conversation_title,
                    "created_at": datetime.now().isoformat(),
                    "updated_at": datetime.now().isoformat()
                }).execute()
            except Exception as e:
                logger.error(f"Failed to save conversation: {e}")
        else:
            try:
                res = supabase_client.table("conversations") \
                    .select("title") \
                    .eq("id", conversation_id) \
                    .single() \
                    .execute()
                conversation_title = res.data.get("title") if res.data else "Conversation"
                supabase_client.table("conversations") \
                    .update({"updated_at": datetime.now().isoformat()}) \
                    .eq("id", conversation_id).execute()
            except Exception as e:
                logger.error(f"Failed to retrieve conversation title: {e}")
                conversation_title = "Conversation"

        try:
            supabase_client.table("chat_messages").insert({
                "conversation_id": conversation_id,
                "user_id": user.id,
                "user_message": chat.message,
                "ai_response": response_text,
                "agent_name": agent_name,
                "created_at": datetime.now().isoformat()
            }).execute()
        except Exception as e:
            logger.error(f"Failed to save chat message: {e}")

        agent_def = get_agent_definition(agent_name)
        return ChatOutput(
            message=response_text,
            agent_name=agent_name,
            agent_display_name=agent_def.display_name,
            agent_icon=agent_def.icon,
            agent_color=agent_def.color,
            conversation_id=conversation_id,
            conversation_title=conversation_title,
            created_at=datetime.now().isoformat()
        )
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Chat error: {e}")
        error_agent = get_agent_definition("error")
        return ChatOutput(
            message=f"I encountered an error: {e}. Please try again or rephrase your question.",
            agent_name="error",
            agent_display_name=error_agent.display_name,
            agent_icon=error_agent.icon,
            agent_color=error_agent.color,
            conversation_id=conversation_id or str(uuid.uuid4()),
            conversation_title="Error Session",
            created_at=datetime.now().isoformat()
        )
from fastapi import Depends

@app.get("/conversations/{conversation_id}/history")
async def get_conversation_history(
    conversation_id: str,
    user=Depends(get_current_user),
):
    rows = (
        supabase_client
        .table("chat_messages")
        .select("id,user_message,ai_response,agent_name,agent_icon,agent_color,agent_display_name,created_at")
        .eq("conversation_id", conversation_id)
        .order("created_at", desc=False)
        .execute()
        .data
    ) or []
    return {"messages": rows}
